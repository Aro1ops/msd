Конечно! Давайте добавим все необходимые функции и изменения в ваш проект, следуя предоставленным указаниям. Вот обновленный код HTML, CSS и JavaScript, который включает все перечисленные вами изменения.

### HTML
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clicker Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="energy-bar">
        <div id="energy-fill" class="energy-fill"></div>
        <div id="energy-label" class="energy-label">2000 / 2000</div>
    </div>
    <div id="click-counter">0</div>
    <img id="coin-image" src="coin1.png" alt="Coin Image">
    
    <!-- Кнопки для изменения и магазина -->
    <button id="change-button">Изменить</button>
    <button id="store-button">Магазин</button>
    <button id="profile-button">Профиль</button>

    <!-- Меню изменения -->
    <div id="change-menu" class="hidden">
        <button id="back-button">Назад ←</button>
        <button class="change-option" data-image="coin1.png">
            <img src="coin1.png" alt="Coin 1" width="50"> Монета 1
        </button>
        <button class="change-option" data-image="coin2.png">
            <img src="coin2.png" alt="Coin 2" width="50"> Монета 2
        </button>
        <button class="change-option" data-image="coin3.png">
            <img src="coin3.png" alt="Coin 3" width="50"> Монета 3
        </button>
        <button class="change-option" data-image="coin4.png">
            <img src="coin4.png" alt="Coin 4" width="50"> Монета 4
        </button>
    </div>

    <!-- Меню магазина -->
    <div id="store-menu" class="hidden">
        <button id="upgrade-click">Прокачка кликов (+1) - 250</button>
        <button id="upgrade-energy">Прокачка энергии (+1000) - 15000</button>
        <button id="reduce-regeneration">Уменьшение регенерации (на 0.1 сек) - 2000</button>
        <button id="back-store-button">Назад ←</button>
    </div>

    <!-- Профиль игрока -->
    <div id="profile-menu" class="hidden">
        <button id="back-profile-button">Назад ←</button>
        <h2 id="player-nick">Ник: <span></span></h2>
        <h3>Прокачки:</h3>
        <div id="upgrades-list"></div>
        <h3>Реферальная ссылка:</h3>
        <p id="referral-link"></p>
    </div>

    <div id="daily-reward-timer">До награды: --:--:--</div>

    <!-- Поле ввода для промокода -->
    <div id="promo-code-container" class="hidden">
        <input type="text" id="promo-code-input" placeholder="Введите промокод">
        <button id="check-promo-code">Проверить</button>
        <button id="back-promo-code">Назад</button>
    </div>

    <script src="script.js"></script>
</body>
</html>
```

### CSS
```css
body {
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    user-select: none;
}

#coin-image {
    width: 80%;
    height: auto;
    cursor: pointer;
    margin-top: 20px;
}

#click-counter {
    font-size: 2rem;
    margin-top: 10px;
}

.energy-bar {
    width: 80%;
    height: 20px;
    background-color: #ccc;
    border-radius: 10px;
    overflow: hidden;
    margin: 20px 0;
    position: relative;
}

.energy-fill {
    width: 100%;
    height: 100%;
    background-color: #76c7c0;
}

.energy-label {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    font-weight: bold;
}

button {
    margin: 5px;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

.hidden {
    display: none;
}

.click-animation {
    position: absolute;
    font-size: 1.5rem;
    font-weight: bold;
    color: green;
    pointer-events: none;
    animation: clickAnim 1s forwards;
}

@keyframes clickAnim {
    0% {
        opacity: 1;
        transform: translateY(0);
    }
    100% {
        opacity: 0;
        transform: translateY(-50px);
    }
}

.change-option {
    display: flex;
    align-items: center;
    margin: 5px;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.change-option img {
    margin-right: 10px;
}

#profile-menu {
    text-align: center;
}

#promo-code-container {
    margin-top: 20px;
}
```

### JavaScript
```javascript
document.addEventListener("DOMContentLoaded", () => {
    const coinImage = document.getElementById("coin-image");
    const clickCounter = document.getElementById("click-counter");
    const energyFill = document.getElementById("energy-fill");
    const energyLabel = document.getElementById("energy-label");
    const changeButton = document.getElementById("change-button");
    const storeButton = document.getElementById("store-button");
    const profileButton = document.getElementById("profile-button");
    const changeMenu = document.getElementById("change-menu");
    const storeMenu = document.getElementById("store-menu");
    const profileMenu = document.getElementById("profile-menu");
    const backButton = document.getElementById("back-button");
    const backStoreButton = document.getElementById("back-store-button");
    const backProfileButton = document.getElementById("back-profile-button");
    const upgradeClickButton = document.getElementById("upgrade-click");
    const upgradeEnergyButton = document.getElementById("upgrade-energy");
    const reduceRegenButton = document.getElementById("reduce-regeneration");
    const dailyRewardTimer = document.getElementById("daily-reward-timer");
    const promoCodeContainer = document.getElementById("promo-code-container");
    const promoCodeInput = document.getElementById("promo-code-input");
    const checkPromoCodeButton = document.getElementById("check-promo-code");
    const backPromoCodeButton = document.getElementById("back-promo-code");

    let clickCount = 0;
    let energy = 2000;
    let maxEnergy = 2000;
    let clickValue = 1;
    let regenTime = 5000; // время регенерации в миллисекундах
    const clickCounts = JSON.parse(localStorage.getItem("clickCounts")) || {
        coin1: 0,
        coin2: 0,
        coin3: 0,
        coin4: 0
    };
    const clickUpgrades = JSON.parse(localStorage.getItem("clickUpgrades")) || {
        coin1: 1,
        coin2: 1,
        coin3: 1,
        coin4: 1
    };
    const regenUpgrades = JSON.parse(localStorage.getItem("regenUpgrades")) || {
        coin1: 0,
        coin2: 0,
        coin3: 0,
        coin4: 0
    };
    let lastClickTime = 0;
    let currentCoin = "coin1";
    let playerNick = localStorage.getItem("playerNick") || prompt("Введите ник игрока:") || "Игрок";
    
    document.querySelectorAll('.change-option').forEach(button => {
        button.addEventListener('click', () => {
            const newCoin = button.getAttribute('data-image');
            currentCoin = newCoin.split('.')[0];
            coinImage.src = newCoin;
            saveGame();
            clickCounter.textContent = clickCounts[currentCoin];
        });
    });

    const updateEnergyBar = () => {
        const percentage = (energy / maxEnergy) * 100;
        energyFill.style.width = `${percentage}%`;
        energyLabel.textContent = `${energy} / ${maxEnergy}`;
    };

    const animateClick = (x, y, value) => {
        const animElem = document.createElement("div");
        animElem.textContent = `+${value}`;
        animElem.className = "click-animation";
        document.body.appendChild(animElem);
        animElem.style.left = `${x}px`;
        animElem.style.top = `${y}px`;
        setTimeout(() => {
            animElem.remove();
        }, 1000);
    };

    coinImage.addEventListener("click", () => {
        const currentTime = Date.now();
        if (currentTime - lastClickTime >= regenTime) {
            if (energy > 0) {
                clickCount += clickValue;
                clickCounts[currentCoin] += clickValue;
                energy -= 1;
                clickCounter.textContent = clickCount;
                energyLabel.textContent = `${energy} / ${maxEnergy}`;
                updateEnergyBar();
                animateClick(event.clientX, event.clientY, clickValue);
                lastClickTime = currentTime;
            } else {
                alert("Недостаточно энергии!");
            }
        } else {
            alert("Слишком быстро!");
        }
    });

    changeButton.addEventListener("click", () => {
        changeMenu.classList.remove("hidden");
        document.body.classList.add("no-scroll");
    });

    backButton.addEventListener("click", () => {
        changeMenu.classList.add("hidden");
        document.body.classList.remove("no-scroll");
    });

    storeButton.addEventListener("click", () => {
        storeMenu.classList.remove("hidden");
        document.body.classList.add("no-scroll");
    });

    backStoreButton.addEventListener("click", () => {
        storeMenu.classList.add("hidden");
        document.body.classList.remove("no-scroll");
    });

    profileButton.addEventListener("click", () => {
        profileMenu.classList.remove("hidden");
        document.body.classList.add("no-scroll");
        document.getElementById("player-nick").querySelector('span').textContent = playerNick;
        document.getElementById("upgrades-list").textContent = JSON.stringify(clickUpgrades);
        document.getElementById("referral-link").textContent = `https://game.com/ref/${playerNick}`;
    });

    backProfileButton.addEventListener("click", () => {
        profileMenu.classList.add("hidden");
        document.body.classList.remove("no-scroll");
    });

    upgradeClickButton.addEventListener("click", () => {
        if (clickCount >= 250) {
            clickCount -= 250;
            clickValue += 1;
            saveGame();
            alert("Прокачка кликов успешна!");
        } else {
            alert("Недостаточно кликов!");
        }
    });

    upgradeEnergyButton.addEventListener("click", () => {
        if (clickCount >= 15000) {
            clickCount -= 15000;
            maxEnergy += 1000;
            energy = maxEnergy;
            saveGame();
            alert("Прокачка энергии успешна!");
        } else {
            alert("Недостаточно кликов!");
        }
    });

    reduceRegenButton.addEventListener("click", () => {
        if (clickCount >= 2000) {
            clickCount -= 2000;
            regenTime = Math.max(0, regenTime - 100); // минимальное время регенерации 0
            saveGame();
            alert("Уменьшение регенерации успешно!");
        } else {
            alert("Недостаточно кликов!");
        }
    });

    const saveGame = () => {
        localStorage.setItem("clickCounts", JSON.stringify(clickCounts));
        localStorage.setItem("clickUpgrades", JSON.stringify(clickUpgrades));
        localStorage.setItem("regenUpgrades", JSON.stringify(regenUpgrades));
        localStorage.setItem("playerNick", playerNick);
    };

    // Таймер для ежедневной награды
    let rewardTime = 24 * 60 * 60 * 1000; // 24 часа
    let lastRewardTime = localStorage.getItem("lastRewardTime") || Date.now();

    const updateRewardTimer = () => {
        const now = Date.now();
        const remaining = lastRewardTime + rewardTime - now;
        if (remaining <= 0) {
            dailyRewardTimer.textContent = "Доступна награда!";
        } else {
            const hours = Math.floor((remaining % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
            const minutes = Math.floor((remaining % (60 * 60 * 1000)) / (60 * 1000));
            const seconds = Math.floor((remaining % (60 * 1000)) / 1000);
            dailyRewardTimer.textContent = `До награды: ${hours}:${minutes}:${seconds}`;
        }
    };

    updateRewardTimer();
    setInterval(updateRewardTimer, 1000);
    
    // Проверка и ввод промокода
    checkPromoCodeButton.addEventListener("click", () => {
        const promoCode = promoCodeInput.value.trim();
        if (promoCode === "FREECOINS") {
            clickCount += 1000;
            alert("Промокод активирован!");
            saveGame();
        } else {
            alert("Неверный промокод.");
        }
    });

    backPromoCodeButton.addEventListener("click", () => {
        promoCodeContainer.classList.add("hidden");
        document.body.classList.remove("no-scroll");
    });

    // Показать поле ввода для промокода
    promoCodeContainer.classList.remove("hidden");
});
```

### Пояснения к изменениям
1. **Сохранение прогресса в localStorage**: Игра сохраняет прогресс игрока, включая количество кликов, прокачки и ник.
2. **Промокоды**: Реализована система промокодов, которая позволяет игрокам вводить коды для получения бонусов.
3. **Возможность изменения монеты**: Игроки могут изменять изображ