Вот доработанный код с учетом ваших пожеланий. Я добавил новые цены для апгрейдов кликов и энергии, изменил параметры регенерации и немного улучшил стилизацию для более красивого отображения.

### HTML
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clicker Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="energy-bar">
        <div id="energy-fill" class="energy-fill"></div>
        <div id="energy-label" class="energy-label">2000 / 2000</div>
    </div>
    <div id="click-counter">0</div>
    <img id="coin-image" src="coin1.png" alt="Coin Image">
    <button id="change-button">Изменить</button>
    <button id="store-button">Магазин</button>
    <div id="change-menu" class="hidden">
        <button id="back-button">Назад ←</button>
        <button class="change-option" data-image="coin1.png">
            <img src="coin1.png" alt="Coin 1" width="50"> Монета 1
        </button>
        <button class="change-option" data-image="coin2.png">
            <img src="coin2.png" alt="Coin 2" width="50"> Монета 2
        </button>
        <button class="change-option" data-image="coin3.png">
            <img src="coin3.png" alt="Coin 3" width="50"> Монета 3
        </button>
        <button class="change-option" data-image="coin4.png">
            <img src="coin4.png" alt="Coin 4" width="50"> Монета 4
        </button>
    </div>
    <div id="store-menu" class="hidden">
        <button id="upgrade-click">Прокачка кликов (+1) - 100</button>
        <button id="upgrade-energy">Прокачка энергии (+1000) - 20000</button>
        <button id="reduce-regeneration">Уменьшение регенерации (на 0.5 сек) - 2000</button>
        <button id="back-store-button">Назад ←</button>
    </div>
    <div id="daily-reward-timer">До награды: --:--:--</div>
    <script src="script.js"></script>
</body>
</html>
```

### JavaScript
```javascript
document.addEventListener("DOMContentLoaded", () => {
    const coinImage = document.getElementById("coin-image");
    const clickCounter = document.getElementById("click-counter");
    const energyFill = document.getElementById("energy-fill");
    const energyLabel = document.getElementById("energy-label");
    const changeButton = document.getElementById("change-button");
    const storeButton = document.getElementById("store-button");
    const changeMenu = document.getElementById("change-menu");
    const storeMenu = document.getElementById("store-menu");
    const backButton = document.getElementById("back-button");
    const backStoreButton = document.getElementById("back-store-button");
    const upgradeClickButton = document.getElementById("upgrade-click");
    const upgradeEnergyButton = document.getElementById("upgrade-energy");
    const reduceRegenButton = document.getElementById("reduce-regeneration");

    let clickCount = 0;
    let energy = 2000;
    let maxEnergy = 2000;
    let clickValue = 1;
    let regenTime = 5000; // время регенерации 5 секунд
    const clickCounts = JSON.parse(localStorage.getItem("clickCounts")) || {
        coin1: 0,
        coin2: 0,
        coin3: 0,
        coin4: 0
    };
    const clickUpgrades = JSON.parse(localStorage.getItem("clickUpgrades")) || {
        coin1: 1,
        coin2: 1,
        coin3: 1,
        coin4: 1
    };
    const regenUpgrades = JSON.parse(localStorage.getItem("regenUpgrades")) || {
        coin1: 0,
        coin2: 0,
        coin3: 0,
        coin4: 0
    };
    let currentCoin = "coin1";

    const upgradeClickCosts = [100, 300, 900, 2700]; // Стоимость для апгрейдов кликов
    const upgradeEnergyCosts = [20000, 30000, 40000]; // Стоимость для апгрейдов энергии

    const updateEnergyBar = () => {
        const percentage = (energy / maxEnergy) * 100;
        energyFill.style.width = `${percentage}%`;
        energyLabel.textContent = `${energy} / ${maxEnergy}`;
    };

    const animateClick = (x, y, value) => {
        const animElem = document.createElement("div");
        animElem.textContent = `+${value}`;
        animElem.className = "click-animation";
        animElem.style.left = `${x}px`;
        animElem.style.top = `${y}px`;
        document.body.appendChild(animElem);

        setTimeout(() => {
            animElem.style.top = `${y - 50}px`;
            animElem.style.opacity = "0";
            setTimeout(() => document.body.removeChild(animElem), 1000);
        }, 0);
    };

    coinImage.addEventListener("click", (event) => {
        if (energy > 0) {
            clickCounts[currentCoin] += clickUpgrades[currentCoin];
            clickCounter.textContent = clickCounts[currentCoin];
            const { clientX: x, clientY: y } = event;
            animateClick(x, y, clickUpgrades[currentCoin]);
            energy -= clickUpgrades[currentCoin];
            updateEnergyBar();
            saveGame();
        }
    });

    changeButton.addEventListener("click", () => {
        changeMenu.classList.remove("hidden");
        storeMenu.classList.add("hidden");
    });

    storeButton.addEventListener("click", () => {
        storeMenu.classList.remove("hidden");
        changeMenu.classList.add("hidden");
    });

    backButton.addEventListener("click", () => {
        changeMenu.classList.add("hidden");
    });

    backStoreButton.addEventListener("click", () => {
        storeMenu.classList.add("hidden");
    });

    const saveGame = () => {
        localStorage.setItem("clickCounts", JSON.stringify(clickCounts));
        localStorage.setItem("clickUpgrades", JSON.stringify(clickUpgrades));
        localStorage.setItem("regenUpgrades", JSON.stringify(regenUpgrades));
        localStorage.setItem("maxEnergy", maxEnergy);
        localStorage.setItem("currentCoin", currentCoin);
        localStorage.setItem("regenTime", regenTime);
    };

    const loadGame = () => {
        const savedClickCounts = JSON.parse(localStorage.getItem("clickCounts"));
        const savedClickUpgrades = JSON.parse(localStorage.getItem("clickUpgrades"));
        const savedRegenUpgrades = JSON.parse(localStorage.getItem("regenUpgrades"));
        const savedMaxEnergy = localStorage.getItem("maxEnergy");
        const savedCurrentCoin = localStorage.getItem("currentCoin");
        const savedRegenTime = localStorage.getItem("regenTime");

        if (savedClickCounts) {
            Object.assign(clickCounts, savedClickCounts);
        }
        if (savedClickUpgrades) {
            Object.assign(clickUpgrades, savedClickUpgrades);
        }
        if (savedRegenUpgrades) {
            Object.assign(regenUpgrades, savedRegenUpgrades);
        }
        if (savedMaxEnergy) {
            maxEnergy = parseInt(savedMaxEnergy, 10);
        }
        if (savedCurrentCoin) {
            currentCoin = savedCurrentCoin;
            coinImage.src = `${currentCoin}.png`;
        }
        if (savedRegenTime) {
            regenTime = parseInt(savedRegenTime, 10);
        }

        clickCounter.textContent = clickCounts[currentCoin];
        updateEnergyBar();
    };

    upgradeClickButton.addEventListener("click", () => {
        const currentLevel = clickUpgrades[currentCoin] - 1;
        if (currentLevel < upgradeClickCosts.length) {
            const cost = upgradeClickCosts[currentLevel];
            if (clickCounts[currentCoin] >= cost) {
                clickCounts[currentCoin] -= cost;
                clickUpgrades[currentCoin] += 1;
                const nextCost = upgradeClickCosts[clickUpgrades[currentCoin] - 1] || "MAX";
                upgradeClickButton.textContent = `Прокачка кликов (+${clickUpgrades[currentCoin]}) - ${nextCost}`;
                clickCounter.textContent = clickCounts[currentCoin];
                saveGame();
            }
        }
    });

    upgradeEnergyButton.addEventListener("click", () => {
        const currentLevel = (maxEnergy / 1000) - 2;
        if (currentLevel < upgradeEnergyCosts.length) {
            const cost = upgradeEnergyCosts[currentLevel];
            if (clickCounts[currentCoin] >= cost) {
                clickCounts[currentCoin] -= cost;
                maxEnergy += 1000;
                const nextCost = upgradeEnergyCosts[(maxEnergy / 1000) - 2] || "MAX";
                upgradeEnergyButton.textContent = `Прокачка энергии (+1000) - ${nextCost}`;
                clickCounter.textContent = clickCounts[currentCoin];
                updateEnergyBar();
                saveGame();
            }
        }
    });

    reduceRegenButton.addEventListener("click", () => {
        const currentRegenLevel = regenUpgrades[currentCoin];
        const cost = 2000 + currentRegenLevel * 5000; // Увеличение стоимости уменьшения времени регенерации
        if (clickCounts[currentCoin] >= cost && regenTime > 1000) {
            clickCounts[currentCoin] -= cost;
            regenTime -= 500;
            regenUpgrades[currentCoin] += 1;
            clickCounter.textContent = clickCounts[currentCoin];
            saveGame();
        }
    });

    document.querySelectorAll(".change-option").forEach(option => {
        option.addEventListener("click", (event) => {
            currentCoin = event.target.dataset.image.replace('.png', '');
            coinImage.src = `${currentCoin}.png`;
            clickCounter.textContent = clickCounts[currentCoin];
            saveGame();
        });
    });

    const regenerateEnergy = () => {
        if (energy < maxEnergy) {
            energy += Math.floor(maxEnergy * 0.05);
            if (energy > maxEnergy) energy = maxEnergy;
            updateEnergyBar();
        }
    };

    setInterval(regenerateEnergy, regenTime);

    loadGame();
});
```

### CSS
```css
body {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #f7f7f7;
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100vh;
    justify-content: center;
}

#coin-image {
    width: 150px;
    cursor: pointer;
    margin-top: 20px;
}

#click-counter {
    font-size: 2em;
    margin: 10px 0;
}

#change-button, #store-button, #back-button, #back-store-button, .change-option, #upgrade-click, #upgrade-energy, #reduce-regeneration {
    padding: 10px 20px;
    font-size: 1em;
    margin: 5px;
    cursor: pointer;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    transition: background-color 0.3s;
}

#change-button:hover, #store-button:hover, #back-button:hover, #back-store-button:hover, .change-option:hover, #upgrade-click:hover, #upgrade-energy:hover, #reduce-regeneration:hover {
    background-color: #45a049;
}

.hidden {
    display: none;
}

.energy-bar {
    width: 80%;
    background-color: #ddd;
    border-radius: 25px;
    overflow: hidden;
    margin-top: 20px;
    height: 30px;
    position: relative;
}

.energy-fill {
    height: 100%;
    background-color: #4CAF50;
    width: 100%;
    transition: width 0.5s;
}

.energy-label {
    position: absolute;
    width: 100%;
    text-align: center;
    line-height: 30px;
    color: white;
    font-weight: bold;
}

.click-animation {
    position: absolute;
    color: #4CAF50;
    font-size: 1.5em;
    pointer-events: none;
    user-select: none;
    transition: top 1s ease, opacity 1s ease;
}

#daily-reward-timer {
    margin-top: 20px;
    font-size: 1.2em;
}
```

### Объяснение изменений:
1. **Прокачка кликов и энергии:** В коде реализованы уровни прокачки с нарастающей стоимостью для улучшения кликов и энергии. Теперь пользователи могут улучшать клики и увеличивать максимальный запас энергии с повышением цен на улучшения.
2. **Регенерация энергии:** Время регенерации уменьшено, а также добавлена возможность уменьшать его через магазин. Стоимость этой функции увеличивается с каждым уровнем.
3. **Сохранение прогресса:** Игровой прогресс сохраняется в `localStorage`, чтобы игроки могли продолжить игру с того же места, где они остановились.
4. **Анимация кликов:** Добавлена анимация появления чисел при клике, что добавляет визуального интереса к игре.

Это должно соответствовать вашим требованиям и сделать игру более интересной и продуманной.