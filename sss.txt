Js
document.addEventListener("DOMContentLoaded", () => {
    const coinImage = document.getElementById("coin-image");
    const clickCounter = document.getElementById("click-counter");
    const energyFill = document.getElementById("energy-fill");
    const energyLabel = document.getElementById("energy-label");
    const changeButton = document.getElementById("change-button");
    const storeButton = document.getElementById("store-button");
    const changeMenu = document.getElementById("change-menu");
    const storeMenu = document.getElementById("store-menu");
    const backButton = document.getElementById("back-button");
    const backStoreButton = document.getElementById("back-store-button");
    const upgradeClickButton = document.getElementById("upgrade-click");
    const upgradeEnergyButton = document.getElementById("upgrade-energy");
    const reduceRegenButton = document.getElementById("reduce-regeneration");
    const dailyRewardTimer = document.getElementById("daily-reward-timer");

    let clickCount = 0;
    let energy = 2000;
    let maxEnergy = 2000;
    let clickValue = 1;
    let regenTime = 10000; // время регенерации в миллисекундах
    const clickCounts = JSON.parse(localStorage.getItem("clickCounts")) || {
        coin1: 0,
        coin2: 0,
        coin3: 0,
        coin4: 0
    };
    const clickUpgrades = JSON.parse(localStorage.getItem("clickUpgrades")) || {
        coin1: 1,
        coin2: 1,
        coin3: 1,
        coin4: 1
    };
    const regenUpgrades = JSON.parse(localStorage.getItem("regenUpgrades")) || {
        coin1: 0,
        coin2: 0,
        coin3: 0,
        coin4: 0
    };
    let currentCoin = "coin1";

    const updateEnergyBar = () => {
        const percentage = (energy / maxEnergy) * 100;
        energyFill.style.width = `${percentage}%`;
        energyLabel.textContent = `${energy} / ${maxEnergy}`;
    };

    const animateClick = (x, y, value) => {
        const animElem = document.createElement("div");
        animElem.textContent = `+${value}`;
        animElem.className = "click-animation";
        animElem.style.left = `${x}px`;
        animElem.style.top = `${y}px`;
        document.body.appendChild(animElem);

        setTimeout(() => {
            animElem.style.top = `${y - 50}px`;
            animElem.style.opacity = "0";
            setTimeout(() => document.body.removeChild(animElem), 1000);
        }, 0);
    };

    coinImage.addEventListener("click", (event) => {
        if (energy > 0) {
            clickCounts[currentCoin] += clickUpgrades[currentCoin];
            clickCounter.textContent = clickCounts[currentCoin];
            const { clientX: x, clientY: y } = event;
            animateClick(x, y, clickUpgrades[currentCoin]);
            energy -= clickUpgrades[currentCoin];
            updateEnergyBar();
            saveGame();
        }
    });

    changeButton.addEventListener("click", () => {
        changeMenu.classList.remove("hidden");
        storeMenu.classList.add("hidden");
    });

    storeButton.addEventListener("click", () => {
        storeMenu.classList.remove("hidden");
        changeMenu.classList.add("hidden");
    });

    backButton.addEventListener("click", () => {
        changeMenu.classList.add("hidden");
    });

    backStoreButton.addEventListener("click", () => {
        storeMenu.classList.add("hidden");
    });

    const saveGame = () => {
        localStorage.setItem("clickCounts", JSON.stringify(clickCounts));
        localStorage.setItem("clickUpgrades", JSON.stringify(clickUpgrades));
        localStorage.setItem("regenUpgrades", JSON.stringify(regenUpgrades));
        localStorage.setItem("maxEnergy", maxEnergy);
        localStorage.setItem("currentCoin", currentCoin);
        localStorage.setItem("regenTime", regenTime);
    };

    const loadGame = () => {
        const savedClickCounts = JSON.parse(localStorage.getItem("clickCounts"));
        const savedClickUpgrades = JSON.parse(localStorage.getItem("clickUpgrades"));
        const savedRegenUpgrades = JSON.parse(localStorage.getItem("regenUpgrades"));
        const savedMaxEnergy = localStorage.getItem("maxEnergy");
        const savedCurrentCoin = localStorage.getItem("currentCoin");
        const savedRegenTime = localStorage.getItem("regenTime");

        if (savedClickCounts) {
            Object.assign(clickCounts, savedClickCounts);
        }
        if (savedClickUpgrades) {
            Object.assign(clickUpgrades, savedClickUpgrades);
        }
        if (savedRegenUpgrades) {
            Object.assign(regenUpgrades, savedRegenUpgrades);
        }
        if (savedMaxEnergy) {
            maxEnergy = parseInt(savedMaxEnergy, 10);
        }
        if (savedCurrentCoin) {
            currentCoin = savedCurrentCoin;
            coinImage.src = `${currentCoin}.png`;
        }
        if (savedRegenTime) {
            regenTime = parseInt(savedRegenTime, 10);
        }

        clickCounter.textContent = clickCounts[currentCoin];
        updateEnergyBar();
    };

    const checkDailyReward = () => {
        const lastClaim = localStorage.getItem("lastDailyReward");
        const now = new Date();
        const nextRewardTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 11, 0, 0); // 11:00 следующего дня

        if (lastClaim) {
            const lastClaimDate = new Date(parseInt(lastClaim, 10));
            if (now > nextRewardTime) {
                clickCounts[currentCoin] += 1000;
                clickCounter.textContent = clickCounts[currentCoin];
                localStorage.setItem("lastDailyReward", now.getTime());
                saveGame();
            }
        } else {
            localStorage.setItem("lastDailyReward", now.getTime());
        }
        updateDailyRewardTimer(nextRewardTime);
    };

    const updateDailyRewardTimer = (nextRewardTime) => {
        const now = new Date();
        let timeRemaining = nextRewardTime - now;

        if (timeRemaining < 0) {
            nextRewardTime.setDate(nextRewardTime.getDate() + 1);
            timeRemaining = nextRewardTime - now;
        }

        const hours = Math.floor(timeRemaining / 3600000);
        const minutes = Math.floor((timeRemaining % 3600000) / 60000);
        const seconds = Math.floor((timeRemaining % 60000) / 1000);

        dailyRewardTimer.textContent = `До награды: ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        setTimeout(() => updateDailyRewardTimer(nextRewardTime), 1000);
    };

    upgradeClickButton.addEventListener("click", () => {
        const cost = clickUpgrades[currentCoin] * 50;
        if (clickCounts[currentCoin] >= cost) {
            clickCounts[currentCoin] -= cost;
            clickUpgrades[currentCoin] += 1;
            upgradeClickButton.textContent = `Прокачка кликов (+${clickUpgrades[currentCoin]}) - ${clickUpgrades[currentCoin] * 50}`;
            clickCounter.textContent = clickCounts[currentCoin];
            saveGame();
        }
    });

    upgradeEnergyButton.addEventListener("click", () => {
        const cost = (maxEnergy / 500) * 3000;
        if (clickCounts[currentCoin] >= cost) {
            clickCounts[currentCoin] -= cost;
            maxEnergy += 500;
            upgradeEnergyButton.textContent = `Прокачка энергии (+500) - ${(maxEnergy / 500) * 3000}`;
            clickCounter.textContent = clickCounts[currentCoin];
            updateEnergyBar();
            saveGame();
        }
    });

    reduceRegenButton.addEventListener("click", () => {
        const cost = regenUpgrades[currentCoin] * 1000 + 2000;
        if (clickCounts[currentCoin] >= cost && regenTime > 1000) {
            clickCounts[currentCoin] -= cost;
            regenUpgrades[currentCoin] += 1;
            regenTime -= 100; // Уменьшение времени на 0.1 сек
            reduceRegenButton.textContent = `Уменьшение регенерации (на ${regenUpgrades[currentCoin] * 0.1} сек) - ${regenUpgrades[currentCoin] * 1000 + 2000}`;
            clickCounter.textContent = clickCounts[currentCoin];
            saveGame();
        }
    });

    loadGame();
    checkDailyReward();

    setInterval(() => {
        if (energy < maxEnergy) {
            energy += 1;
            updateEnergyBar();
        }
    }, regenTime);
});
html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clicker Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="energy-bar">
        <div id="energy-fill" class="energy-fill"></div>
        <div id="energy-label" class="energy-label">2000 / 2000</div>
    </div>
    <div id="click-counter">0</div>
    <img id="coin-image" src="coin.png" alt="Coin Image">
    <button id="change-button">Изменить</button>
    <button id="store-button">Магазин</button>
    <div id="change-menu" class="hidden">
        <button id="back-button">Назад ←</button>
        <button class="change-option" data-image="coin1.png">Монета 1</button>
        <button class="change-option" data-image="coin2.png">Монета 2</button>
        <button class="change-option" data-image="coin3.png">Монета 3</button>
        <button class="change-option" data-image="coin4.png">Монета 4</button>
    </div>
    <div id="store-menu" class="hidden">
        <button id="upgrade-click">Прокачка кликов (+1) - 50</button>
        <button id="upgrade-energy">Прокачка энергии (+500) - 3000</button>
        <button id="reduce-regeneration">Уменьшение регенерации (на 0.1 сек) - 2000</button>
        <button id="back-store-button">Назад ←</button>
    </div>
    <div id="daily-reward-timer">До награды: --:--:--</div>
    <script src="script.js"></script>
</body>
</html>
css
body {
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}

#coin-image {
    width: 80%; /* Coin now occupies most of the screen width */
    height: auto;
    cursor: pointer;
    margin-top: 20px;
}

#click-counter {
    font-size: 2rem;
    margin-top: 10px;
}

.energy-bar {
    width: 80%;
    height: 20px;
    background-color: #ccc;
    border-radius: 10px; /* Rounded corners for energy bar */
    overflow: hidden;
    margin: 20px 0;
    position: relative;
}

.energy-fill {
    width: 100%;
    height: 100%;
    background-color: #76c7c0;
}

.energy-label {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    font-weight: bold;
}

button {
    margin: 5px;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

.hidden {
    display: none;
}

.click-animation {
    position: absolute;
    font-size: 1.5rem;
    font-weight: bold;
    color: green;
    pointer-events: none;
    animation: clickAnim 1s forwards;
}

@keyframes clickAnim {
    0% {
        opacity: 1;
        transform: translateY(0);
    }
    100% {
        opacity: 0;
        transform: translateY(-50px);
    }
}
