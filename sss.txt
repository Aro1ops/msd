Конечно, вот целый код с учетом всех ваших требований:

### HTML
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clicker Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="energy-bar">
        <div id="energy-fill" class="energy-fill"></div>
        <div id="energy-label" class="energy-label">2000 / 2000</div>
    </div>
    <div id="click-counter">0</div>
    <img id="coin-image" src="coin1.png" alt="Coin Image">
    <button id="change-button">Изменить</button>
    <button id="store-button">Магазин</button>
    
    <div id="change-menu" class="hidden">
        <button id="back-button">Назад ←</button>
        <button class="change-option" data-image="coin1.png">
            <img src="coin1.png" alt="Coin 1" width="50"> Монета 1
        </button>
        <button class="change-option" data-image="coin2.png">
            <img src="coin2.png" alt="Coin 2" width="50"> Монета 2
        </button>
        <button class="change-option" data-image="coin3.png">
            <img src="coin3.png" alt="Coin 3" width="50"> Монета 3
        </button>
        <button class="change-option" data-image="coin4.png">
            <img src="coin4.png" alt="Coin 4" width="50"> Монета 4
        </button>
    </div>

    <div id="store-menu" class="hidden">
        <button id="upgrade-click">Прокачка кликов (+1) - 50</button>
        <button id="upgrade-energy">Прокачка энергии (+500) - 3000</button>
        <button id="reduce-regeneration">Уменьшение регенерации (на 0.1 сек) - 2000</button>
        <button id="back-store-button">Назад ←</button>
    </div>

    <div id="daily-reward-timer">До награды: --:--:--</div>

    <!-- Режим разработчика -->
    <div id="developer-mode-text">Режим разработчика</div>
    <div id="developer-panel" class="hidden">
        <input type="password" id="developer-password" placeholder="Введите пароль">
        <button id="submit-password">Войти</button>
    </div>

    <div id="admin-panel" class="hidden">
        <button id="reset-progress">Очистить весь прогресс</button>
        <div>
            <label for="click-amount">Выдать кликов:</label>
            <input type="number" id="click-amount" placeholder="Количество">
            <select id="click-coin-select">
                <option value="coin1">Монета 1</option>
                <option value="coin2">Монета 2</option>
                <option value="coin3">Монета 3</option>
                <option value="coin4">Монета 4</option>
            </select>
            <button id="add-clicks">Добавить клики</button>
        </div>
        <div>
            <label for="energy-amount">Добавить энергии:</label>
            <input type="number" id="energy-amount" placeholder="Количество">
            <select id="energy-coin-select">
                <option value="coin1">Монета 1</option>
                <option value="coin2">Монета 2</option>
                <option value="coin3">Монета 3</option>
                <option value="coin4">Монета 4</option>
            </select>
            <button id="add-energy">Добавить энергию</button>
        </div>
        <div>
            <label for="regen-amount">Изменить регенерацию:</label>
            <input type="number" id="regen-amount" placeholder="Регенерация (сек)">
            <select id="regen-coin-select">
                <option value="coin1">Монета 1</option>
                <option value="coin2">Монета 2</option>
                <option value="coin3">Монета 3</option>
                <option value="coin4">Монета 4</option>
            </select>
            <button id="change-regen">Изменить регенерацию</button>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>
```

### CSS
```css
body {
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    user-select: none; /* Отключает выделение текста */
    -webkit-user-select: none;
}

#coin-image {
    width: 80%; /* Coin now occupies most of the screen width */
    height: auto;
    cursor: pointer;
    margin-top: 20px;
}

#click-counter {
    font-size: 2rem;
    margin-top: 10px;
}

.energy-bar {
    width: 80%;
    height: 20px;
    background-color: #ccc;
    border-radius: 10px; /* Rounded corners for energy bar */
    overflow: hidden;
    margin: 20px 0;
    position: relative;
}

.energy-fill {
    width: 100%;
    height: 100%;
    background-color: #76c7c0;
}

.energy-label {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    font-weight: bold;
}

button {
    margin: 5px;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

.hidden {
    display: none;
}

.click-animation {
    position: absolute;
    font-size: 1.5rem;
    font-weight: bold;
    color: green;
    pointer-events: none;
    animation: clickAnim 1s forwards;
}

@keyframes clickAnim {
    0% {
        opacity: 1;
        transform: translateY(0);
    }
    100% {
        opacity: 0;
        transform: translateY(-50px);
    }
}

.change-option {
    align-items: center;
    margin: 5px;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.change-option img {
    margin-right: 10px; /* Space between image and text */
}

#developer-mode-text {
    margin-top: 20px;
    font-size: 0.9rem;
    color: gray;
    cursor: pointer;
}

#developer-panel {
    margin-top: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

#developer-panel input {
    padding: 5px;
    margin-bottom: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
}

#admin-panel {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

#admin-panel div {
    margin-bottom: 10px;
}
```

### JavaScript
```javascript
document.addEventListener("DOMContentLoaded", () => {
    const coinImage = document.getElementById("coin-image");
    const clickCounter = document.getElementById("click-counter");
    const energyFill = document.getElementById("energy-fill");
    const energyLabel = document.getElementById("energy-label");
    const changeButton = document.getElementById("change-button");
    const storeButton = document.getElementById("store-button");
    const changeMenu = document.getElementById("change-menu");
    const storeMenu = document.getElementById("store-menu");
    const backButton = document.getElementById("back-button");
    const backStoreButton = document.getElementById("back-store-button");
    const upgradeClickButton = document.getElementById("upgrade-click");
    const upgradeEnergyButton = document.getElementById("upgrade-energy");
    const reduceRegenButton = document.getElementById("reduce-regeneration");
    const dailyRewardTimer = document.getElementById("daily-reward-timer");
    const developerModeText = document.getElementById("developer-mode-text");
    const developerPanel = document.getElementById("developer-panel");
    const submitPasswordButton = document.getElementById("submit-password");
    const adminPanel = document.getElementById("admin-panel");
    const resetProgressButton = document.getElementById("reset-progress");
    const addClicksButton = document.getElementById("add-clicks");
    const addEnergyButton = document.getElementById("add-energy");
    const changeRegenButton = document.getElementById("change-regen");

    let clicks = 0;
    let energy = 2000;
    let maxEnergy = 2000;
    let clickValue = 1;
    let regenRate = 1000; // in milliseconds (1 second)
    let developerModeEnabled = false;

    // Function to update the energy bar
    function updateEnergyBar() {
        energyFill.style.width = `${(energy / maxEnergy) * 100}%`;
        energyLabel.textContent = `${energy} / ${maxEnergy}`;
    }

    // Click event on the coin
    coinImage.addEventListener("click", (event) => {
        if (energy >= clickValue) {
            clicks += clickValue;
            energy -= clickValue;
            clickCounter.textContent = clicks;

            // Display click animation
            const clickAnimation = document.createElement("div");
            clickAnimation.className = "click-animation";
            clickAnimation.style.left = `${event.clientX}px`;
            clickAnimation.style.top = `${event.clientY}px`;
            clickAnimation.textContent = `+${clickValue}`;
            document.body.appendChild(clickAnimation);

            setTimeout(() => {
                clickAnimation.remove();
            }, 1000);

            updateEnergyBar();
        }
    });

    // Energy regeneration
    setInterval(() => {
        if (energy < maxEnergy) {
            energy++;
            updateEnergyBar();
        }
    }, regenRate);

    // Change menu toggle
    changeButton.addEventListener("click", () => {
        changeMenu.classList.toggle("hidden");
    });

    // Store menu toggle
    storeButton.addEventListener("click", () => {
        storeMenu.classList.toggle("hidden");
    });

    // Back button in change menu
    backButton.addEventListener("click", () => {
        changeMenu.classList.add("hidden");
    });

    // Back button in store menu
    backStoreButton.addEventListener("click", () => {
        storeMenu.classList.add("hidden");
    });

    // Change coin image
    document.querySelectorAll(".change-option").forEach(button => {
        button.addEventListener("click", () => {
            const newImage = button.getAttribute("data-image");
            coinImage.src = newImage;
            changeMenu.classList.add("hidden");
        });
    });

    // Upgrade click value
    upgradeClickButton.addEventListener("click", () => {
        if (clicks >= 50) {
            clickValue++;
            clicks -= 50;
            clickCounter.textContent = clicks;
        }
    });

    // Upgrade energy
    upgradeEnergyButton.addEventListener("click", () => {
        if (clicks >= 3000) {
            maxEnergy += 500;
            clicks -= 3000;
            clickCounter.textContent = clicks;
            updateEnergyBar();
        }
    });

    // Reduce regeneration rate
    reduceRegenButton.addEventListener("click", () => {
        if (clicks >= 2000 && regenRate > 100) {
            regenRate -= 100; // reduce by 0.1 second
            clicks -= 2000;
            clickCounter.textContent = clicks;
        }
    });

    // Daily reward timer
    function updateDailyRewardTimer() {
        const now = new Date();
        const nextRewardTime = new Date();
        nextRewardTime.setHours(24, 0, 0, 0); // next midnight

        const timeDiff = nextRewardTime - now;

        const hours = Math.floor(timeDiff / 1000 / 60 / 60);
        const minutes = Math.floor((timeDiff / 1000 / 60) % 60);
        const seconds = Math.floor((timeDiff / 1000) % 60);

        dailyRewardTimer.textContent = `До награды: ${hours}:${minutes}:${seconds}`;
    }

    setInterval(updateDailyRewardTimer, 1000);

    // Developer mode toggle
    developerModeText.addEventListener("click", () => {
        developerPanel.classList.toggle("hidden");
    });

    // Developer mode login
    submitPasswordButton.addEventListener("click", () => {
        const password = document.getElementById("developer-password").value;
        if (password === "secretPassword") {
            developerModeEnabled = true;
            adminPanel.classList.remove("hidden");
        }
    });

    // Reset progress
    resetProgressButton.addEventListener("click", () => {
        clicks = 0;
        energy = maxEnergy;
        clickCounter.textContent = clicks;
        updateEnergyBar();
    });

    // Add clicks
    addClicksButton.addEventListener("click", () => {
        const amount = parseInt(document.getElementById("click-amount").value);
        clicks += amount;
        clickCounter.textContent = clicks;
    });

    // Add energy
    addEnergyButton.addEventListener("click", () => {
        const amount = parseInt(document.getElementById("energy-amount").value);
        energy = Math.min(energy + amount, maxEnergy);
        updateEnergyBar();
    });

    // Change regeneration rate
    changeRegenButton.addEventListener("click", () => {
        const amount = parseFloat(document.getElementById("regen-amount").value);
        regenRate = amount * 1000;
    });
});
```

Этот код предоставляет функциональность для вашей игры-кликера, включая изменение изображения монеты, магазин для улучшений, таймер для ежедневных наград, режим разработчика и дополнительные административные функции. Пароль для входа в административную панель — `secretPassword`.