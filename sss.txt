document.addEventListener("DOMContentLoaded", () => {
    const coinImage = document.getElementById("coin-image");
    const clickCounter = document.getElementById("click-counter");
    const energyFill = document.getElementById("energy-fill");
    const energyLabel = document.getElementById("energy-label");
    const changeButton = document.getElementById("change-button");
    const storeButton = document.getElementById("store-button");
    const changeMenu = document.getElementById("change-menu");
    const storeMenu = document.getElementById("store-menu");
    const backButton = document.getElementById("back-button");
    const backStoreButton = document.getElementById("back-store-button");
    const changeOptions = document.querySelectorAll(".change-option");
    const upgradeClickButton = document.getElementById("upgrade-click");
    const upgradeEnergyButton = document.getElementById("upgrade-energy");
    const reduceRegenButton = document.getElementById("reduce-regeneration");

    let clickCount = 0;
    let energy = 2000;
    let maxEnergy = 2000;
    let clickValue = 1;
    let regenTime = 10000; // время регенерации в миллисекундах
    const clickCounts = {
        coin1: 0,
        coin2: 0,
        coin3: 0,
        coin4: 0
    };
    const clickUpgrades = {
        coin1: 1,
        coin2: 1,
        coin3: 1,
        coin4: 1
    };
    const regenUpgrades = {
        coin1: 0,
        coin2: 0,
        coin3: 0,
        coin4: 0
    };
    let currentCoin = "coin1";

    const updateEnergyBar = () => {
        const percentage = (energy / maxEnergy) * 100;
        energyFill.style.width = `${percentage}%`;
        energyLabel.textContent = `${energy} / ${maxEnergy}`;
    };

    const animateClick = (value) => {
        const animElem = document.createElement("div");
        animElem.textContent = `+${value}`;
        animElem.className = "click-animation";
        animElem.style.position = "absolute";
        animElem.style.left = "50%";
        animElem.style.top = "50%";
        animElem.style.transform = "translate(-50%, -100%)";
        animElem.style.fontSize = "20px";
        animElem.style.fontWeight = "bold";
        animElem.style.color = "red";
        document.body.appendChild(animElem);

        setTimeout(() => {
            animElem.style.top = "20%";
            animElem.style.opacity = "0";
            setTimeout(() => document.body.removeChild(animElem), 500);
        }, 0);
    };

    coinImage.addEventListener("click", () => {
        if (energy > 0) {
            clickCounts[currentCoin] += clickUpgrades[currentCoin];
            clickCounter.textContent = clickCounts[currentCoin];
            animateClick(clickUpgrades[currentCoin]);
            energy -= clickUpgrades[currentCoin];
            updateEnergyBar();
        }
    });

    changeButton.addEventListener("click", () => {
        changeMenu.classList.remove("hidden");
    });

    storeButton.addEventListener("click", () => {
        storeMenu.classList.remove("hidden");
    });

    backButton.addEventListener("click", () => {
        changeMenu.classList.add("hidden");
    });

    backStoreButton.addEventListener("click", () => {
        storeMenu.classList.add("hidden");
    });

    changeOptions.forEach(option => {
        option.addEventListener("click", (event) => {
            const newImage = event.target.getAttribute("data-image");
            currentCoin = newImage.replace(".png", "");
            coinImage.src = newImage;
            clickCounter.textContent = clickCounts[currentCoin];
            changeMenu.classList.add("hidden");
        });
    });

    upgradeClickButton.addEventListener("click", () => {
        const cost = 50 * (clickUpgrades[currentCoin]);
        if (clickCounts[currentCoin] >= cost) {
            clickCounts[currentCoin] -= cost;
            clickUpgrades[currentCoin] += 1;
            clickCounter.textContent = clickCounts[currentCoin];
            upgradeClickButton.textContent = `Прокачка кликов (+${clickUpgrades[currentCoin]}) - ${cost * 2}`;
        }
    });

    upgradeEnergyButton.addEventListener("click", () => {
        const cost = 3000 + (maxEnergy - 2000) / 500 * 500;
        if (clickCounts[currentCoin] >= cost) {
            clickCounts[currentCoin] -= cost;
            maxEnergy += 500;
            energy = Math.min(energy, maxEnergy);
            updateEnergyBar();
            upgradeEnergyButton.textContent = `Прокачка энергии (+500) - ${cost + 500}`;
        }
    });

    reduceRegenButton.addEventListener("click", () => {
        const cost = 2000 + regenUpgrades[current

Coin] * 1000;
        if (clickCounts[currentCoin] >= cost && regenTime > 1000) {
            clickCounts[currentCoin] -= cost;
            regenUpgrades[currentCoin] += 1;
            regenTime -= 100; // Уменьшение времени на 0.1 секунды
            reduceRegenButton.textContent = `Уменьшение регенерации (на 0.1 сек) - ${cost + 1000}`;
            clickCounter.textContent = clickCounts[currentCoin];
        }
    });

    setInterval(() => {
        if (energy < maxEnergy) {
            energy += 1;
            updateEnergyBar();
        }
    }, regenTime);
    
    // Убираем возможность масштабирования на мобильных устройствах
    document.addEventListener('touchstart', function(event) {
        if (event.touches.length > 1) {
            event.preventDefault();
        }
    }, { passive: false });

    document.addEventListener('dblclick', function(event) {
        event.preventDefault();
    }, { passive: false });
});